<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020年电子科技大学ACM-ICPC暑假前集训-图论-题解</title>
      <link href="/2020/06/02/2020%E5%B9%B4%E7%94%B5%E5%AD%90%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6ACM-ICPC%E6%9A%91%E5%81%87%E5%89%8D%E9%9B%86%E8%AE%AD-%E5%9B%BE%E8%AE%BA-%E9%A2%98%E8%A7%A3/"/>
      <url>/2020/06/02/2020%E5%B9%B4%E7%94%B5%E5%AD%90%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6ACM-ICPC%E6%9A%91%E5%81%87%E5%89%8D%E9%9B%86%E8%AE%AD-%E5%9B%BE%E8%AE%BA-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="B-国际城市设计大赛"><a href="#B-国际城市设计大赛" class="headerlink" title="B-国际城市设计大赛"></a>B-国际城市设计大赛</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给一个$n$个点，m条边的无向图，求这个图的<strong>严格次小</strong>生成树的边权之和。</p><p>数据范围：$2\leq n\leq m\leq 3\times 10^5,1\leq u,v\leq n,1\leq w\leq 10^9$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><strong>严格次小</strong>生成树边权之和只比最小生成树边权之和大。</p><p>最小生成树是由$n-1$条边构成的，其他的$m-n+1$就是多余边，那么当我们把一条多余边$e(u,v,w)$加到最小生成树中时，该多余边会与最小生成树上$u$到$v$的路径形成一个环。如果我们用多余边替换路径上的最大边，得到的新树就有可能是严格次小生成树。但是当加入的多余边的权值和路径上最大边的权值相等时，得到的新树就不是严格次小生成树，这时我们需要用这个多余边来路径上的次大边。</p><p>首先用$Kruskal$算法生成最小生成树，过程中记录最小生成树的边权之和$sum$。然后我们可以用倍增$LCA$来维护一条路径上的最大边和次大边，$dp$过程与经典倍增$LCA$类似：设$fa[i][j]$为最小生成树中结点$i$向上走$2^j$步后能走到的结点，$d[p][i]$指结点$p$和$fa[p][i]$之间路径中边权最大值，$ds[p][i]$为结点$p$和$fa[p][i]$之间路径中边权次大值。</p><p>那么当$d[p][i-1]=d[fa[p][i-1]][i-1]$时，</p><p>有$d[p][i]=d[p][i-1]$，$ds[p][i]=max(ds[p][i-1],ds[fa[p][i-1]][i-1])$；</p><p>当$d[p][i-1]&gt;d[fa[p][i-1]][i-1]$时，</p><p>有$d[p][i]=d[p][i-1]$，$ds[p][i]=max(d[fa[p][i-1]][i-1],ds[p][i-1])$；</p><p>$d[p][i-1]<d[fa[p][i-1]][i-1]$时与$d[p][i-1]>d[fa[p][i-1]][i-1]$时类似。</p><p>查询过程也与经典倍增$LCA$类似。</p><p>时间复杂度为$O(mlogn)$。</p><p>需要注意：</p><ul><li>因为加边时要加双向边，所以数组要开$m\times 2$的大小，否则会<code>Runtime Error</code>。</li><li>$sum$和$ans$要开<code>long long</code>。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 600005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e16</span></span><br><span class="line"><span class="keyword">int</span> f[N],dep[N],fa[N][<span class="number">21</span>]; <span class="comment">//dep[i]-最小生成树中i结点的深度； fa[i][j]-最小生成树中结点i向上走2^j步后能走到的结点； </span></span><br><span class="line"><span class="keyword">int</span> E,lnk[N],ter[N],w[N],nxt[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum,ans,val1,val2,d[N][<span class="number">21</span>],ds[N][<span class="number">21</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,z,intree;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> edge&amp; a,<span class="keyword">const</span> edge&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.z&lt;b.z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfa</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (f[i]==i)?i:f[i]=getfa(f[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span> <span class="comment">//向邻接表中添加边 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ter[++E]=y; w[E]=z;</span><br><span class="line">nxt[E]=lnk[x]; lnk[x]=E;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> las)</span> <span class="comment">//dfs，倍增LCA维护最大和次大边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=dep[p];i++) <span class="comment">//d[p][i]指结点p和fa[p][i]之间路径中边权最大值；ds[p][i]指结点p和fa[p][i]之间路径中边权次大值，最小为0 </span></span><br><span class="line">&#123;</span><br><span class="line">fa[p][i]=fa[fa[p][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(d[p][i<span class="number">-1</span>]&gt;d[fa[p][i<span class="number">-1</span>]][i<span class="number">-1</span>])</span><br><span class="line">&#123;</span><br><span class="line">d[p][i]=d[p][i<span class="number">-1</span>]; </span><br><span class="line">ds[p][i]=<span class="built_in">max</span>(d[fa[p][i<span class="number">-1</span>]][i<span class="number">-1</span>],ds[p][i<span class="number">-1</span>]); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(d[p][i<span class="number">-1</span>]&lt;d[fa[p][i<span class="number">-1</span>]][i<span class="number">-1</span>])</span><br><span class="line">&#123;</span><br><span class="line">d[p][i]=d[fa[p][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">ds[p][i]=<span class="built_in">max</span>(d[p][i<span class="number">-1</span>],ds[fa[p][i<span class="number">-1</span>]][i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">d[p][i]=d[p][i<span class="number">-1</span>];</span><br><span class="line">ds[p][i]=<span class="built_in">max</span>(ds[p][i<span class="number">-1</span>],ds[fa[p][i<span class="number">-1</span>]][i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=lnk[p];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ter[i]!=las)</span><br><span class="line">&#123;</span><br><span class="line">dep[ter[i]]=dep[p]+<span class="number">1</span>; <span class="comment">//儿子深度+1</span></span><br><span class="line">fa[ter[i]][<span class="number">0</span>]=p; d[ter[i]][<span class="number">0</span>]=w[i]; </span><br><span class="line">dfs(ter[i],p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update2</span><span class="params">(<span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;val1)</span><br><span class="line">&#123;</span><br><span class="line">val2=val1; val1=x;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;val2&amp;&amp;x!=val1) val2=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> t)</span> <span class="comment">//x向上跳2^t次</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">update2(d[x][t]);</span><br><span class="line">update2(ds[x][t]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> <span class="comment">//求x-&gt;y的最大和次大的树边，存到val1和val2中 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&lt;dep[y]) swap(x,y);</span><br><span class="line"><span class="keyword">int</span> res=dep[x]-dep[y];</span><br><span class="line">val1=-inf; val2=-inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;i--) <span class="comment">//x跳到与y深度一致 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((res&gt;&gt;i)&amp;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(val1&gt;d[x][i])</span><br><span class="line">&#123;</span><br><span class="line">val2=<span class="built_in">max</span>(val2,d[x][i]); <span class="comment">//val1=val1;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(val1&lt;d[x][i])</span><br><span class="line">&#123;</span><br><span class="line">val2=<span class="built_in">max</span>(val1,ds[x][i]); val1=d[x][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//val1==d[x][i]</span></span><br><span class="line">&#123;</span><br><span class="line">val2=<span class="built_in">max</span>(val2,ds[x][i]); <span class="comment">//val1=val1;</span></span><br><span class="line">&#125;</span><br><span class="line">x=fa[x][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x==y) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;i--) <span class="comment">//倍增询问,一起倍增到父亲+1深度 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[x][i]!=fa[y][i])</span><br><span class="line">&#123;</span><br><span class="line">update(x,i); update(y,i);</span><br><span class="line">x=fa[x][i]; y=fa[y][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">update(x,<span class="number">0</span>); update(y,<span class="number">0</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;e[i].x,&amp;e[i].y,&amp;e[i].z);</span><br><span class="line">f[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">sort(e+<span class="number">1</span>,e+<span class="number">1</span>+m,cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="comment">//建立最小生成树的邻接表 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=getfa(e[i].x); <span class="keyword">int</span> y=getfa(e[i].y);</span><br><span class="line"><span class="keyword">if</span>(x!=y)</span><br><span class="line">&#123;</span><br><span class="line">add(e[i].x,e[i].y,e[i].z); add(e[i].y,e[i].x,e[i].z); e[i].intree=<span class="number">1</span>;</span><br><span class="line">f[x]=y;</span><br><span class="line">sum+=e[i].z; </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(f[i]==i) <span class="comment">//从根结点dfs，倍增LCA维护最大和次大边 </span></span><br><span class="line">&#123;</span><br><span class="line">dfs(i,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans=inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[i].intree!=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">query(e[i].x,e[i].y); <span class="comment">//求x-&gt;y的最大和次大的树边，存到val1和val2中 </span></span><br><span class="line"><span class="keyword">if</span>(val1!=e[i].z) ans=<span class="built_in">min</span>(ans,sum+e[i].z-val1);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(val1==e[i].z) ans=<span class="built_in">min</span>(ans,sum+e[i].z-val2); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="L-PAFF的演唱会"><a href="#L-PAFF的演唱会" class="headerlink" title="L-PAFF的演唱会"></a>L-PAFF的演唱会</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>给一个带权图，图中的每一个点和边都有权值$a<em>i$和$w</em>{ij}$；对于每个点$i$，求一个点$j$使得$2\times w_{ij}+a_j$的值最小。</p><p>数据范围：$2\leq n\leq 2\times 10^5,1\leq m\leq 2\times 10^5,1\leq u,v\leq n,1\leq w\leq 10^{12},1\leq a_i\leq 10^{12}$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>对一个点i，找任意的j使得$2\times w_{ij}+a_j$的值最小，那么我们可以把所有的$j$都集成到超级源点上，超级源点到j的距离设置为$j$的点权，那么对于点$i$的答案即为超级源点到$i$的最短路，用$dijkstra$算法即可，过程中用优先队列维护最小值。</p><p>时间复杂度为$O(nlogm)$。</p><p>需要注意：</p><ul><li><em>PAFF</em>最终会回到$i$城市，所以加边时边权要$\times 2$。</li><li>$dis$数组要开<code>long long</code>。</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dis[N]; <span class="comment">//dis[i]--超级源点到i的最短距离 </span></span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> w;</span><br><span class="line">edge(<span class="keyword">int</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span><br><span class="line">&#123;</span><br><span class="line">num=a;</span><br><span class="line">w=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> edge&amp;n) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> w&gt;n.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; g[N]; <span class="comment">//邻接表 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) dis[i]=<span class="number">9e18</span>;</span><br><span class="line">dis[start]=<span class="number">0</span>;</span><br><span class="line">priority_queue&lt;edge&gt; q;</span><br><span class="line">q.push(edge(start,<span class="number">0</span>)); </span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=q.top().num; q.pop(); </span><br><span class="line"><span class="keyword">if</span>(vis[x]) <span class="keyword">continue</span>;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;   </span><br><span class="line">edge t=g[x][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[t.num] &amp;&amp; dis[g[x][i].num]&gt;dis[x]+g[x][i].w) </span><br><span class="line">&#123; </span><br><span class="line">dis[g[x][i].num]=dis[x]+g[x][i].w; </span><br><span class="line">t.w=dis[g[x][i].num]; </span><br><span class="line">q.push(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="comment">//输入m条边 </span></span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">int</span> a,b; <span class="keyword">long</span> <span class="keyword">long</span> c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %lld"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">g[a].push_back(edge(b,<span class="number">2</span>*c));</span><br><span class="line">g[b].push_back(edge(a,<span class="number">2</span>*c));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="comment">//输入n个价格 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;c);</span><br><span class="line">g[<span class="number">0</span>].push_back(edge(i,c));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dijkstra(<span class="number">0</span>,n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,dis[i]);</span><br><span class="line"><span class="keyword">if</span>(i&lt;n) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P-矩阵乘法"><a href="#P-矩阵乘法" class="headerlink" title="P-矩阵乘法"></a>P-矩阵乘法</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>给出若干矩阵的行数和列数，问是否存在一个排列使得矩阵乘法有意义，如果有求乘积矩阵元素个数最大值。</p><p>数据范围：$2\leq n\leq 10^5,1\leq x_i,y_i\leq 100$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>对每一个矩阵，我们可以把它看做一条边，例如$3\times 4$的矩阵可以看作结点$3$到结点$4$的一条边。最后判定由若干个矩阵生成的有向图是否有欧拉通路或欧拉回路即可。如果所有结点入度等于出度，并且有向图连通，就说明生成的图有欧拉回路，输出图中最大的结点编号的平方即可；如果恰有一个结点入度比出度多$1$，恰有一个结点出度比入度多$1$，并且有向图连通，就说明生成的图有欧拉通路，输入这两个结点的乘积即可。如果没有欧拉通路或欧拉回路，或者图不连通，就说明不存在一个排列使得矩阵乘法有意义。</p><p>程序中可以用$dfs$判定图是否连通，输入结点时记录入度、出度和最大结点编号。$dfs$的起点可以选图中的任意一个结点，经过一次$dfs$后判定图中的结点是否都被遍历，如果是则说明图连通，否则图不连通。</p><p>时间复杂度为$O(n^2)$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d_in[<span class="number">205</span>],d_out[<span class="number">205</span>],g[<span class="number">205</span>][<span class="number">205</span>],vis[<span class="number">205</span>],in_g[<span class="number">205</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> strt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[strt]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">101</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i]==<span class="number">0</span>&amp;&amp;g[strt][i]&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dfs(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> a,b,nodesum=<span class="number">0</span>,maxnode=<span class="number">0</span>,sum_inout=<span class="number">0</span>,sum_in=<span class="number">0</span>,sum_out=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b);  <span class="comment">// a-&gt;b</span></span><br><span class="line"><span class="keyword">if</span>(a&gt;maxnode) maxnode=a; <span class="keyword">if</span>(b&gt;maxnode) maxnode=b; <span class="comment">//统计最大行或最大列 </span></span><br><span class="line"><span class="keyword">if</span>(d_out[a]==<span class="number">0</span>&amp;&amp;d_in[a]==<span class="number">0</span>) <span class="comment">//统计图中的 </span></span><br><span class="line">&#123;</span><br><span class="line">nodesum++; in_g[a]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">d_out[a]++;</span><br><span class="line"><span class="keyword">if</span>(d_out[b]==<span class="number">0</span>&amp;&amp;d_in[b]==<span class="number">0</span>) <span class="comment">//结点个数 </span></span><br><span class="line">&#123;</span><br><span class="line">nodesum++; in_g[b]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">d_in[b]++;</span><br><span class="line">g[a][b]=<span class="number">1</span>; g[b][a]=<span class="number">1</span>; <span class="comment">//邻接矩阵存储，看作无向图 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> gap,flag=<span class="number">1</span>,strt=<span class="number">0</span>,<span class="built_in">end</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(in_g[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d_in[i]==d_out[i]) <span class="comment">//结点入度与出度相等 </span></span><br><span class="line">&#123;</span><br><span class="line">sum_inout++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(d_in[i]&gt;d_out[i]) <span class="comment">//结点入度大于出度 </span></span><br><span class="line">&#123;</span><br><span class="line">gap=d_in[i]-d_out[i]; </span><br><span class="line"><span class="keyword">if</span>(gap==<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">sum_in++;</span><br><span class="line"><span class="built_in">end</span>=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> flag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(d_in[i]&lt;d_out[i]) <span class="comment">//结点入度小于出度 </span></span><br><span class="line">&#123;</span><br><span class="line">gap=d_out[i]-d_in[i];</span><br><span class="line"><span class="keyword">if</span>(gap==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum_out++;</span><br><span class="line">strt=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> flag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strt==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">101</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(in_g[i]==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">strt=i; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(strt);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">205</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(in_g[i]==<span class="number">1</span>&amp;&amp;vis[i]==<span class="number">0</span>) flag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>||sum_in&gt;<span class="number">1</span>||sum_out&gt;<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>); <span class="comment">//不满足条件 </span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sum_inout==nodesum) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,maxnode*maxnode); <span class="comment">//每个结点入度和出度都相等，成环 </span></span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,strt*<span class="built_in">end</span>); <span class="comment">//成路径 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-ICPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LCA </tag>
            
            <tag> Kruskal算法 </tag>
            
            <tag> Dijkstra算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Hexo+Butterfly主题+Github搭建个人博客</title>
      <link href="/2020/05/28/%E9%80%9A%E8%BF%87Hexo+Butterfly%E4%B8%BB%E9%A2%98+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/05/28/%E9%80%9A%E8%BF%87Hexo+Butterfly%E4%B8%BB%E9%A2%98+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p><strong>这里贴上Butterfly主题的Post Front-matter模板，方便自己取用：</strong> <code>TEST123</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo+Butterfly主题+Github搭建个人博客</span><br><span class="line">date: 2020&#x2F;5&#x2F;28 13:46:25</span><br><span class="line">tags: </span><br><span class="line">- Hexo</span><br><span class="line">- 博客</span><br><span class="line">categories:</span><br><span class="line">- 其他</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img: </span><br><span class="line">comments: </span><br><span class="line">cover: </span><br><span class="line">toc: true</span><br><span class="line">toc_number: true</span><br><span class="line">copyright:</span><br><span class="line">mathjas:</span><br><span class="line">katex: </span><br><span class="line">---</span><br></pre></td></tr></table></figure><hr><h2 id="安装Hexo的前提"><a href="#安装Hexo的前提" class="headerlink" title="安装Hexo的前提"></a>安装Hexo的前提</h2><p>安装Hexo前需要安装：</p><ul><li>Node.js（建议10.0以上版本）</li><li>Git</li></ul><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>安装上面两个程序后，即可到博客的根目录下使用npm安装Hexo：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="Hexo初始化"><a href="#Hexo初始化" class="headerlink" title="Hexo初始化"></a>Hexo初始化</h2><p>在博客的根目录下执行指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder]</span><br></pre></td></tr></table></figure><p>如果没有设置folder，Hexo将默认在目前的文件夹存放。</p><p>命令执行完成后，将在根目录下生成相应的文件，我们需要关注下述几个目录及文件：</p><ul><li><code>_config.yml</code>：存放配置信息，可以在此配置大部分的参数</li><li><code>source-&gt;posts</code>：存放post的md文件</li><li><code>themes</code>：主题文件夹</li></ul><h2 id="几个指令"><a href="#几个指令" class="headerlink" title="几个指令"></a>几个指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>可以简写为<code>$ hexo g</code>，用于生成静态文件。若后面加上<code>-d</code>选项可在文件生成后立即部署网站。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>可以简写为<code>$ hexo d</code>，用于部署网站。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>用于清除缓存文件和已生成的静态文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>可以简写为<code>$ hexo s</code>，用于启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><p>更多指令见<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">Hexo官方文档</a>。</p><h2 id="Butterfly主题安装"><a href="#Butterfly主题安装" class="headerlink" title="Butterfly主题安装"></a>Butterfly主题安装</h2><p>在博客的根目录下执行指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;Butterfly</span><br></pre></td></tr></table></figure><h2 id="Butterfly主题应用"><a href="#Butterfly主题应用" class="headerlink" title="Butterfly主题应用"></a>Butterfly主题应用</h2><p>修改站点配置文件<code>_config.yml</code>，把主题修改为Butterfly。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: Butterfly</span><br></pre></td></tr></table></figure><p>为便于后续平滑升级，把主题默认的配置文件<code>_config.yml</code>复制到 Hexo工作目录下的 <code>source/_data/butterfly.yml</code>，如果 source/_data的目录不存在那就创建一个。</p><p>有关主题的细节设置可以参考<a href="https://jerryc.me/posts/21cfbf15/#安裝" target="_blank" rel="noopener">Butterfly主题官方文档</a>。</p><h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>在Github上创建一个仓库，仓库名设置成<code>username.github.io</code>，其中username是Github的用户名称。</p><h3 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h3><p>如果是首次使用Git，那么需要在博客根目录下执行如下指令来配置用户名和邮箱：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;your username&quot;</span><br><span class="line">$ git config --global user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure><p>稳妥起见，填写的“your username”和“your email”最好与Github账户相同。</p><h3 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h3><p>添加完成后在博客根目录执行如下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>然后连续三次回车,生成公钥。</p><p>在C:/用户/用户名/.ssh目录下找到<code>id_rsa.pub</code>文件,用文本编辑工具打开，并复制所有文本内容。在Github页面右上角，点击用户头像-&gt;Settings-&gt;SSH and GPG keys-&gt;New SSH key-&gt;Key中粘贴复制的公钥文本内容，Title可以随意填写。</p><p>添加完成后在博客根目录执行如下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果配置成功，可以看到成功的回复。</p><h3 id="上传到Github"><a href="#上传到Github" class="headerlink" title="上传到Github"></a>上传到Github</h3><p>配置<code>_config.yml</code>中的repo信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: #你的仓库地址,如:https:&#x2F;&#x2F;github.com&#x2F;ZhiyiChe&#x2F;ZhiyiChe.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>安装以下插件，作用是直接通过Hexo来发布到Github：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装成功后执行<code>$ hexo d</code>即可把内容部署到Github。</p><hr><p>如果过程中有任何问题，请参考<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">Hexo官方文档</a>和<a href="https://jerryc.me/posts/21cfbf15/#安裝" target="_blank" rel="noopener">Butterfly主题官方文档</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年电子科技大学ACM-ICPC暑假前集训-动态规划-题解</title>
      <link href="/2020/05/27/2020%E5%B9%B4%E7%94%B5%E5%AD%90%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6ACM-ICPC%E6%9A%91%E5%81%87%E5%89%8D%E9%9B%86%E8%AE%AD-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E9%A2%98%E8%A7%A3/"/>
      <url>/2020/05/27/2020%E5%B9%B4%E7%94%B5%E5%AD%90%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6ACM-ICPC%E6%9A%91%E5%81%87%E5%89%8D%E9%9B%86%E8%AE%AD-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="F-我是音乐小天才"><a href="#F-我是音乐小天才" class="headerlink" title="F-我是音乐小天才"></a>F-我是音乐小天才</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个长度为$n$的字符串，求要使这个字符串成为回文串最少需要插入多少个字符。</p><p>数据范围：$1\leq n\leq 5000$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑题目可以转换为求输入的字符串$c$和它的逆序字符串$c1$的最长公共子序列$maxlen$，那么最少需要插入的字符个数即为$n-maxlen$。</p><p>定义状态$maxlen[i][j]$为字符串$c[1,…,i]$和字符串$c1[1,…,j]$的公共子序列长度，则状态转移方程为：</p><script type="math/tex; mode=display">maxlen[i][j]= \begin{cases} maxlen[i-1][j-1]+1,c[i]==c1[j] \\ max(maxlen[i-1][j],maxlen[i][j-1]),c[i]!=c1[j] \end{cases}</script><p>最后输出$n-maxlen[n][n]$即为答案。</p><p>时间复杂度为$O(n^2)$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c[<span class="number">5005</span>],c1[<span class="number">5005</span>];</span><br><span class="line"><span class="keyword">int</span> maxlen[<span class="number">5005</span>][<span class="number">5005</span>]; <span class="comment">//表示字符串c[1,...,i]和字符串c1[1,...,j]的公共子序列长度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,c+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="comment">//c1为c的逆序</span></span><br><span class="line">&#123; </span><br><span class="line">    c1[i]=c[n-i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(maxlen,<span class="number">0</span>,<span class="keyword">sizeof</span>(maxlen));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="comment">//dp过程 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i]==c1[j]) maxlen[i][j]=maxlen[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;  </span><br><span class="line"><span class="keyword">else</span> maxlen[i][j]=<span class="built_in">max</span>(maxlen[i<span class="number">-1</span>][j],maxlen[i][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-maxlen[n][n]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”"><a href="#G-君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”" class="headerlink" title="G-君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”"></a>G-君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>有$n$种普通物品，其中第$i$种体积为$V_i$，价值为$W_i$，共有$D_i$件；有$m$件神奇物品，第$i$件的价值$W_i$与分配的体积$V_i$之间的关系为$W_i=x_i\times V_i^2+y_i\times V_i+z_i$。求体积为$C$的背包能装的最大收益。</p><p>数据范围：$1\leq n\leq 10^3,1\leq m\leq 5,1\leq C\leq 10^3,1\leq V_i,W_i,D_i\leq 10^3$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>考虑普通物品为多重背包问题，魔法物品暴力$dp$即可。</p><p>若用0-1背包暴力求解普通物品问题，时间复杂度为$O(nCD)$。故考虑二进制优化，将多重背包问题转化为0-1背包问题再求解，时间复杂度为$O(nClogD)$。</p><p>定义状态$dp[i][j]$为前$i$件物品使用$j$体积的最大收益。</p><p>首先求解普通物品：更新$dp[i][j]=max(dp[i-1][j-w[i]]+w[i],dp[i][j])$。其中第$i$件物品指二进制优化后的“一件物品”，$w[i]$为二进制优化后的“一件物品”的收益。</p><p>然后求解魔法物品：枚举$V_i$更新$dp[i][j]=max(dp[i-1][j-V_i]+x_i\times V_i^2+y_i\times V_i+z_i,dp[i][j])$即可。</p><p>时间复杂度为$O(nClogD)$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,c;</span><br><span class="line"><span class="keyword">int</span> v,w,d;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;n,&amp;m,&amp;c);</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n--) <span class="comment">//求解普通物品</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;v,&amp;w,&amp;d);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;d&gt;<span class="number">0</span>&amp;&amp;i&lt;=<span class="number">20</span>;i++) <span class="comment">//dp过程 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> num=((<span class="number">1</span>&lt;&lt;i))&lt;d?(<span class="number">1</span>&lt;&lt;i):d; <span class="comment">//二进制优化</span></span><br><span class="line">d-=num;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=c;j&gt;=num*v;j--)</span><br><span class="line">&#123;</span><br><span class="line">dp[j]=<span class="built_in">max</span>(dp[j-num*v]+num*w,dp[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(m--) <span class="comment">//求解魔法物品</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;x,&amp;y,&amp;z); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=c;j&gt;=<span class="number">0</span>;j--) <span class="comment">//dp过程 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;=j;v++)</span><br><span class="line">&#123;</span><br><span class="line">dp[j]=<span class="built_in">max</span>(dp[j-v]+x*v*v+y*v+z,dp[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[c]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="N-猛男修树"><a href="#N-猛男修树" class="headerlink" title="N-猛男修树"></a>N-猛男修树</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一棵有n个结点的树，问想要修剪出一棵正好具有p个结点的树最少需要修剪多少次。</p><p>数据范围：$1\leq p\leq n\leq 200$</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>定义状态$dp[i][j]$为$i$为根结点的子树中，删掉一些边变成恰有$j$个结点的新树需要删去的最少边数。显然，对于根节点$root$的某个儿子$son$，要么将儿子及其所有的子节点全部删掉，要么在儿子的子树中选出一些边删掉。</p><p>考虑通过遍历接入儿子节点及其子树的状态来更新本结点的状态：在接入儿子节点时，如果将儿子及其所有的子节点全部删掉，则更新$dp[root][k]=dp[root][k]+1$；如果在儿子的子树中选出一些边删掉，那么更新$dp[root][k]=max(dp[root][k],dp[son][j]+dp[root][k-j])$。</p><p>有两点要注意：</p><ul><li><p>题目中输入的树边没有指定哪个是父结点，哪个是子节点。因此我从结点$1$开始递归寻找每个结点的儿子，并把每个结点的儿子存入”儿子表“中。</p></li><li><p>最后取$dp[i][p]$为答案时，如果$i$不是根节点，那么它需要脱离它的父结点，因此删除操作需要加$1$。</p></li></ul><p>估算时间复杂度为$O(np^2)$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">205</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;son[N]; <span class="comment">//存儿子结点</span></span><br><span class="line"><span class="keyword">int</span> flag[N]; <span class="comment">//判定是否有父结点，0-没有，1-有 </span></span><br><span class="line"><span class="keyword">int</span> dp[N][N]; <span class="comment">//dp[i][j]：以i为根结点的子树中，删掉一些边变成恰有j个结点的新树需要删去的最少边数</span></span><br><span class="line"><span class="keyword">int</span> n,p;</span><br><span class="line"><span class="keyword">int</span> e[N][N]; <span class="comment">//存边，邻接矩阵 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findson</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//递归寻找每个结点的儿子</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[x][i]==<span class="number">1</span>&amp;&amp;flag[i]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">son[x].push_back(i);</span><br><span class="line">flag[i]=<span class="number">1</span>;</span><br><span class="line">findson(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dp[u][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[u].<span class="built_in">size</span>();++i) <span class="comment">//依次遍历u的儿子 </span></span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">int</span> v=son[u][i]; <span class="comment">//v：u的儿子 </span></span><br><span class="line">dfs(v);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=p;j&gt;=<span class="number">1</span>;--j) <span class="comment">//p：要剪成的目标结点数 </span></span><br><span class="line">&#123;</span><br><span class="line">dp[u][j]+=<span class="number">1</span>; <span class="comment">//每添加一个儿子，dp[u][j]加1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;j;++k) <span class="comment">//k从1循环到j-1</span></span><br><span class="line">&#123;</span><br><span class="line">dp[u][j]=<span class="built_in">min</span>(dp[u][j],dp[v][k]+dp[u][j-k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;p); </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="comment">//初始化son、dp、flag</span></span><br><span class="line">&#123;</span><br><span class="line">son[i].<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=p;++j)</span><br><span class="line">dp[i][j]=<span class="number">1000000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i) <span class="comment">//输入边，以邻接矩阵存储 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b);</span><br><span class="line">e[a][b]=<span class="number">1</span>; e[b][a]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flag[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">findson(<span class="number">1</span>);  <span class="comment">//找每个结点的儿子</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1000000000</span>;</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">1</span>); <span class="comment">//dp过程</span></span><br><span class="line">ans=dp[<span class="number">1</span>][p]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="built_in">min</span>(ans,dp[i][p]+<span class="number">1</span>); <span class="comment">//如果i不是根结点，那么i要脱离它的父结点，删除操作加1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P-近战法师暴击好累"><a href="#P-近战法师暴击好累" class="headerlink" title="P-近战法师暴击好累"></a>P-近战法师暴击好累</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>有$n$只怪物排成一排，第$i$只怪物的伤害值为$a<em>i$，一对相邻并且伤害值相同$(a_i=a</em>{i+1})$的怪物合并为一只伤害值为$a_i+1$的怪物，问怪物最少可以被合并成多少个。</p><p>数据范围：$1\leq n\leq 500,1\leq a_i\leq 1000$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>定义状态$dp[l][r]$为$[l, r]$区间合并后的最少怪物个数；如果$[l,r]$区间的怪物能被合并成一个，那么用$damage[l][r]$表示$[l,r]$区间合并后那个怪物的伤害值。</p><p>从$1$到$n$依次枚举区间长度，根据下面状态转移方程更新$dp$的值：</p><p>$if$ $(dp[l][mid-1]==1$ &amp;&amp; $dp[mid][r]==1$ &amp;&amp; $a[l][mid-1]==a[mid][r])$ </p><p>​    $then$ $dp[l][r]=1,a[l][r]=a[l][mid-1]+1$；</p><p>$dp[i][j]=min(dp[i][j],dp[i][mid-1]+dp[mid][j])$。</p><p>最后输出$dp[1][n]$即可。</p><p>时间复杂度为$O(n^3)$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">505</span>][<span class="number">505</span>],damage[<span class="number">505</span>][<span class="number">505</span>]; <span class="comment">//dp[i][j]表示区间[i,j]所需的击杀次数，damage[i][j]表示区间[i,j]合并后的伤害 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="comment">//初始化dp数组 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=<span class="number">100000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;damage[i][i]);</span><br><span class="line">dp[i][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">2</span>;len&lt;=n;len++) <span class="comment">//枚举区间长度 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n-len+<span class="number">1</span>;i++) <span class="comment">//区间头从1到n-len+1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j=i+len<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> mid=i+<span class="number">1</span>;mid&lt;=j;mid++) <span class="comment">//枚举区间[i,j]中间值mid</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i][mid<span class="number">-1</span>]==<span class="number">1</span>&amp;&amp;dp[mid][j]==<span class="number">1</span>&amp;&amp;damage[i][mid<span class="number">-1</span>]==damage[mid][j]) <span class="comment">//若满足合并要求 </span></span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=<span class="number">1</span>;</span><br><span class="line">damage[i][j]=damage[i][mid<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">dp[i][j]=<span class="built_in">min</span>(dp[i][j],dp[i][mid<span class="number">-1</span>]+dp[mid][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[<span class="number">1</span>][n]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="R-君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”"><a href="#R-君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”" class="headerlink" title="R-君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”"></a>R-君の名前は？唱：“达拉崩吧斑得贝迪卜多比鲁翁”</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>此题是 G 题的困难版本，和 G 题唯一的不同是数据范围和时间范围。</strong></p><p>有$n$种普通物品，其中第$i$种体积为$V_i$，价值为$W_i$，共有$D_i$件；有$m$件神奇物品，第$i$件的价值$W_i$与分配的体积$V_i$之间的关系为$W_i=x_i\times V_i^2+y_i\times V_i+z_i$。求体积为$C$的背包能装的最大收益。</p><p>数据范围：$1\leq n\leq 10^4,1\leq m\leq 5,1\leq C\leq 10^4,1\leq V_i,W_i,D_i\leq 10^3$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p>考虑普通物品为多重背包问题，魔法物品暴力$dp$即可。</p><p>若用0-1背包暴力求解普通物品问题，时间复杂度为$O(nCD)$。故考虑二进制优化，将多重背包问题转化为0-1背包问题再求解，时间复杂度为$O(nClogD)$。</p><p>定义状态$dp[i][j]$为前$i$件物品使用$j$体积的最大收益。</p><p>首先求解普通物品：更新$dp[i][j]=max(dp[i-1][j-w[i]]+w[i],dp[i][j])$。其中第$i$件物品指二进制优化后的“一件物品”，$w[i]$为二进制优化后的“一件物品”的收益。</p><p>然后求解魔法物品：枚举$Vi$更新$dp[i][j]=max(dp[i-1][j-V_i]+x_i\times V_i^2+y_i\times V_i+z_i,dp[i][j])$即可。</p><p>注意：$dp$结果可能会爆<code>int</code>，所以开<code>long long</code>数组存储$dp$的值，过程中要注意强制类型转换。</p><p>时间复杂度为$O(nClogD)$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> dp[<span class="number">10100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,c;</span><br><span class="line"><span class="keyword">int</span> v,w,d;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;n,&amp;m,&amp;c);</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n--) <span class="comment">//求解普通物品 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;v,&amp;w,&amp;d);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;d&gt;<span class="number">0</span>&amp;&amp;i&lt;=<span class="number">20</span>;i++) <span class="comment">//dp过程 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> num=((<span class="number">1</span>&lt;&lt;i))&lt;d?(<span class="number">1</span>&lt;&lt;i):d; <span class="comment">//二进制优化 </span></span><br><span class="line">d-=num;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=c;j&gt;=num*v;j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[j-num*v]+num*w&gt;dp[j]) dp[j]=dp[j-num*v]+num*w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(m--) <span class="comment">//求解魔法物品 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=c;j&gt;=<span class="number">0</span>;j--) <span class="comment">//dp过程 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;=j;v++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> w=(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)x*v*v+y*v+z;</span><br><span class="line"><span class="keyword">if</span>(dp[j-v]+w&gt;dp[j]) dp[j]=dp[j-v]+w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[c]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-ICPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 最长公共子序列 </tag>
            
            <tag> 背包 </tag>
            
            <tag> 二进制优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/27/hello-world/"/>
      <url>/2020/05/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
